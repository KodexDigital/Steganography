@using Steganography.ViewModels
@model StegInViewModel

@{
    ViewData["Title"] = "Image Steganography";
}

<div class="container mt-4">
    <h2 class="text-center mb-4">🔐 Image Steganography Tool</h2>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">@TempData["Success"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    <div class="row">
        <div class="col-md-6">
            <h4>Encode Message</h4>
            <form asp-action="Encode" method="post" enctype="multipart/form-data">
                <div class="mb-3">
                    <label class="form-label">Select Image</label>
                    <input class="form-control" type="file" name="ImageFile" accept="image/*" required>
                    <small>Tip: A 300×300 image can store approx. 11,250 characters (with AES encryption overhead).</small>
                </div>
                <div class="mb-3">
                    <label class="form-label">Message to Hide</label>
                    <textarea class="form-control" name="Message" rows="4" required>@Model?.Message</textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label">Encryption Password</label>
                    <input class="form-control" type="password" name="Password" required>
                </div>
                <button class="btn btn-primary" type="submit">Embed Message</button>
            </form>
        </div>

        <div class="col-md-6">
            <h4>Decode Message</h4>
            <form asp-action="Decode" method="post" enctype="multipart/form-data">
                <div class="mb-3">
                    <label class="form-label">Select Stego Image</label>
                    <input class="form-control" type="file" name="stegoImage" accept="image/*" required>
                </div>
                <div class="mb-3">
                    <label class="form-label">Decryption Password</label>
                    <input class="form-control" type="password" name="Password" required>
                </div>
                <button class="btn btn-success" type="submit">Extract Message</button>
            </form>
        </div>
    </div>

    @if (ViewBag.EncodedImagePath != null)
    {
        <hr />
        <div class="text-center">
            <h5>✅ Stego Image</h5>
            <img src="@ViewBag.EncodedImagePath" alt="Stego Image" class="img-fluid" style="max-height: 300px;" />
            <br />
            <a class="btn btn-outline-secondary mt-2" href="@ViewBag.EncodedImagePath" download>Download Stego Image</a>
        </div>
    }

    @* @if (!string.IsNullOrEmpty(Model?.ExtractedMessage))
    {
        <hr />
        <div>
            <h5>📝 Extracted Message:</h5>
            <div class="alert alert-info">@Model.ExtractedMessage</div>
        </div>
    } *@
</div>

@* <button class="btn btn-outline-primary" id="installBtn">Install App</button>

<script>
    let deferredPrompt;
    const installBtn = document.getElementById('installBtn');

    window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        installBtn.hidden = false;

        installBtn.addEventListener('click', () => {
            installBtn.hidden = true;
            deferredPrompt.prompt();
        });
    });
</script>
 *@


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const imageInput = document.querySelector('input[name="ImageFile"]');
            const messageBox = document.querySelector('textarea[name="Message"]');
            const passwordInput = document.querySelector('input[name="Password"]');
            const capacityDiv = document.createElement('div');

            imageInput?.parentNode?.appendChild(capacityDiv);

            imageInput?.addEventListener('change', () => {
                const file = imageInput.files[0];
                if (!file) return;

                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = new Image();
                    img.onload = function () {
                        const totalBits = img.width * img.height; // 1 bit per pixel
                        const maxChars = Math.floor(totalBits / 8);

                        capacityDiv.innerHTML = `<small class="text-muted">🖼️ This image can store ~${maxChars} characters (after encryption overhead).</small>`;
                    };
                    img.src = e.target.result;
                };
                reader.readAsDataURL(file);
            });
        });
    </script>
}
